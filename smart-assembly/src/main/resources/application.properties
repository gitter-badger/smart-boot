server.port=8080
server.session.timeout=600
spring.velocity.checkTemplateLocation=false
spring.aop.auto=true
spring.aop.proxy-target-class=false

rmiPort=9999

# DATASOURCE
dataSource.url=jdbc:mysql://localhost:3306/trade?useUnicode=true&autoReconnect=true&rewriteBatchedStatements=TRUE
dataSource.driverClassName=com.mysql.jdbc.Driver
dataSource.username=root
dataSource.password=root
dataSource.maxActive=20
dataSource.initialSize=1
dataSource.maxWait=60000
dataSource.minIdle=10
dataSource.maxIdle=15
dataSource.timeBetweenEvictionRunsMillis=60000
dataSource.minEvictableIdleTimeMillis=300000
dataSource.validationQuery=SELECT 'x'
dataSource.testWhileIdle=true
dataSource.testOnBorrow=false
dataSource.testOnReturn=false
dataSource.maxOpenPreparedStatements=20
dataSource.removeAbandoned=true
dataSource.removeAbandonedTimeout=1800
dataSource.logAbandoned=true


redis.cacheName=trade
# REDIS (RedisProperties)
# Database index used by the connection factory.
#spring.redis.database=0 
# Redis server host.
spring.redis.host=localhost
# Login password of the redis server.
spring.redis.password=root
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
spring.redis.pool.max-active=8 
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
spring.redis.pool.max-idle=30 
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
spring.redis.pool.max-wait=3000 
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
spring.redis.pool.min-idle=0 
# Redis server port.
spring.redis.port=6379 
# Connection timeout in milliseconds.
spring.redis.timeout=0 

#Ping++支付配置
pingxx.apiKey=sk_live_SOWPY1LSybzDT8C0uD9GCWXT
#pingxx.apiKey=sk_test_u9iNH8XXDan15G0K00r9iTmP
pingxx.appId=app_9SOW90ALeTq1jjXH